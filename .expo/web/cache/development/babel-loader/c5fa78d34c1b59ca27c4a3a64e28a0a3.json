{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = _regeneratorRuntime.mark(signupSaga);\n\nimport { takeEvery } from 'redux-saga/effects';\nimport { createPromiseSaga, handleAsyncActions, reducerUtils } from \"../lib/asyncUtils\";\nimport { getStoreByKeyword } from \"../api\";\nvar GET_ADDRESS = 'signup/GET_ADDRESS';\nvar GET_ADDRESS_SUCCESS = 'signup/GET_ADDRESS_SUCCESS';\nvar GET_ADDRESS_ERROR = 'signup/GET_ADDRESS_ERROR';\nvar ADD_PICKED_ADDRESS = 'signup/ADD_ADDRESS';\nvar REMOVE_PICKED_ADDRESS = 'signup/REMOVE_ADDRESS';\nvar UPDATE_LOCATION = 'signup/UPDATE_LOCATION';\nexport var getAddress = function getAddress(info) {\n  return {\n    type: GET_ADDRESS,\n    payload: info\n  };\n};\nexport var getAddressSuccess = function getAddressSuccess(data) {\n  return {\n    type: GET_ADDRESS_SUCCESS,\n    payload: data\n  };\n};\nexport var getAddressError = function getAddressError(error) {\n  return {\n    type: GET_ADDRESS_ERROR,\n    payload: error\n  };\n};\nexport var addAddress = function addAddress(address) {\n  return {\n    type: ADD_PICKED_ADDRESS,\n    payload: address,\n    meta: address.id\n  };\n};\nexport var removeAddress = function removeAddress(id) {\n  return {\n    type: REMOVE_PICKED_ADDRESS,\n    payload: id,\n    meta: id\n  };\n};\nexport var updateLocation = function updateLocation(coords) {\n  return {\n    type: UPDATE_LOCATION,\n    payload: coords\n  };\n};\nvar getAddressSaga = createPromiseSaga(GET_ADDRESS, getStoreByKeyword);\nexport function signupSaga() {\n  return _regeneratorRuntime.wrap(function signupSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeEvery(GET_ADDRESS, getAddressSaga);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nvar actions = {\n  getAddress: getAddress,\n  getAddressSuccess: getAddressSuccess,\n  getAddressError: getAddressError,\n  addAddress: addAddress,\n  removeAddress: removeAddress,\n  updateLocation: updateLocation\n};\nvar initialState = {\n  address: reducerUtils.initial([]),\n  picked_address: reducerUtils.initial({}),\n  coords: null\n};\nexport default function signup() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_ADDRESS:\n    case GET_ADDRESS_SUCCESS:\n    case GET_ADDRESS_ERROR:\n      return handleAsyncActions(GET_ADDRESS, 'address', [], true)(state, action);\n\n    case ADD_PICKED_ADDRESS:\n      if (action.meta in state.picked_address) {\n        return state;\n      } else {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          picked_address: _objectSpread(_objectSpread({}, state.picked_address), {}, {\n            data: _objectSpread(_objectSpread({}, state.picked_address.data), {}, _defineProperty({}, action.meta, action.payload))\n          })\n        });\n      }\n\n    case REMOVE_PICKED_ADDRESS:\n      var newData = _extends({}, state.picked_address.data);\n\n      delete newData[action.meta];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        picked_address: _objectSpread(_objectSpread({}, state.picked_address), {}, {\n          data: newData\n        })\n      });\n\n    case UPDATE_LOCATION:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        coords: action.payload\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/limwondong/codestates/nyamnyam/nyamnyam-client/src/modules/signup.ts"],"names":["signupSaga","takeEvery","createPromiseSaga","handleAsyncActions","reducerUtils","getStoreByKeyword","GET_ADDRESS","GET_ADDRESS_SUCCESS","GET_ADDRESS_ERROR","ADD_PICKED_ADDRESS","REMOVE_PICKED_ADDRESS","UPDATE_LOCATION","getAddress","info","type","payload","getAddressSuccess","data","getAddressError","error","addAddress","address","meta","id","removeAddress","updateLocation","coords","getAddressSaga","actions","initialState","initial","picked_address","signup","state","action","newData"],"mappings":"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","sourcesContent":["/* eslint-disable no-case-declarations */\nimport { takeEvery } from 'redux-saga/effects';\nimport { ActionType } from 'typesafe-actions';\nimport { AxiosError } from 'axios';\n\nimport {\n  createPromiseSaga,\n  handleAsyncActions,\n  reducerUtils,\n} from '@base/lib/asyncUtils';\nimport { getStoreByKeyword } from '@base/api';\nimport { AddressAPIProps, AddressObject } from '@base/types/api';\nimport { PickedAddressObject, Coords } from '@base/types/SignUpAddress';\nimport { SignupState } from '@base/types/utils';\n\nconst GET_ADDRESS = 'signup/GET_ADDRESS' as const;\nconst GET_ADDRESS_SUCCESS = 'signup/GET_ADDRESS_SUCCESS' as const;\nconst GET_ADDRESS_ERROR = 'signup/GET_ADDRESS_ERROR' as const;\n\nconst ADD_PICKED_ADDRESS = 'signup/ADD_ADDRESS' as const;\nconst REMOVE_PICKED_ADDRESS = 'signup/REMOVE_ADDRESS' as const;\n\nconst UPDATE_LOCATION = 'signup/UPDATE_LOCATION' as const;\n\nexport const getAddress = (info: AddressAPIProps) => ({\n  type: GET_ADDRESS,\n  payload: info,\n});\n\nexport const getAddressSuccess = (data: AddressObject[]) => ({\n  type: GET_ADDRESS_SUCCESS,\n  payload: data,\n});\n\nexport const getAddressError = (error: AxiosError) => ({\n  type: GET_ADDRESS_ERROR,\n  payload: error,\n});\n\nexport const addAddress = (address: PickedAddressObject) => ({\n  type: ADD_PICKED_ADDRESS,\n  payload: address,\n  meta: address.id,\n});\n\nexport const removeAddress = (id: string) => ({\n  type: REMOVE_PICKED_ADDRESS,\n  payload: id,\n  meta: id,\n});\n\nexport const updateLocation = (coords: Coords) => ({\n  type: UPDATE_LOCATION,\n  payload: coords,\n});\n\nconst getAddressSaga = createPromiseSaga(GET_ADDRESS, getStoreByKeyword);\n\nexport function* signupSaga() {\n  yield takeEvery(GET_ADDRESS, getAddressSaga);\n}\n\nconst actions = {\n  getAddress,\n  getAddressSuccess,\n  getAddressError,\n  addAddress,\n  removeAddress,\n  updateLocation,\n};\ntype SignupAction = ActionType<typeof actions>;\n\nconst initialState = {\n  address: reducerUtils.initial([]),\n  picked_address: reducerUtils.initial({}),\n  coords: null,\n};\n\nexport default function signup(\n  state: SignupState = initialState,\n  action: SignupAction\n): SignupState {\n  switch (action.type) {\n    case GET_ADDRESS:\n    case GET_ADDRESS_SUCCESS:\n    case GET_ADDRESS_ERROR:\n      return handleAsyncActions<SignupState>(\n        GET_ADDRESS,\n        'address',\n        [],\n        true\n      )(state, action);\n    case ADD_PICKED_ADDRESS:\n      if (action.meta in state.picked_address) {\n        return state;\n      } else {\n        return {\n          ...state,\n          picked_address: {\n            ...state.picked_address,\n            data: {\n              ...state.picked_address.data,\n              [action.meta]: action.payload,\n            },\n          },\n        };\n      }\n    case REMOVE_PICKED_ADDRESS:\n      const newData = Object.assign({}, state.picked_address.data);\n      delete newData[action.meta];\n      return {\n        ...state,\n        picked_address: {\n          ...state.picked_address,\n          data: newData,\n        },\n      };\n    case UPDATE_LOCATION:\n      return {\n        ...state,\n        coords: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}