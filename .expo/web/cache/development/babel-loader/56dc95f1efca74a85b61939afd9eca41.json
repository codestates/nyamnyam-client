{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = _regeneratorRuntime.mark(requestSigninSaga),\n    _marked2 = _regeneratorRuntime.mark(signinSaga);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport * as authAPI from \"../api/auth\";\nimport { storeTokens } from \"../lib/auth\";\nvar SET_SIGNIN_TYPE = 'signin/SIGNIN_TYPE';\nvar SIGNIN_SUCCESS = 'signin/SIGNIN_SUCCESS';\nvar SIGNIN_ERROR = 'signin/SIGNIN_ERROR';\nvar REQUEST_SIGNIN = 'signin/REQUEST_SIGNIN';\nexport var setSigninType = function setSigninType(signinType) {\n  return {\n    type: SET_SIGNIN_TYPE,\n    payload: signinType\n  };\n};\nexport var signinSuccess = function signinSuccess(userData) {\n  return {\n    type: SIGNIN_SUCCESS,\n    payload: userData\n  };\n};\nexport var signinError = function signinError(msg) {\n  return {\n    type: SIGNIN_ERROR,\n    payload: msg\n  };\n};\nexport var requestSignin = function requestSignin(signinInfo) {\n  return {\n    type: REQUEST_SIGNIN,\n    payload: signinInfo\n  };\n};\n\nfunction requestSigninSaga(action) {\n  var signinInfo, response, userdata, access_token, refresh_token;\n  return _regeneratorRuntime.wrap(function requestSigninSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          signinInfo = action.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(authAPI.signin, signinInfo);\n\n        case 4:\n          response = _context.sent;\n          userdata = response.userdata;\n          access_token = userdata.access_token, refresh_token = userdata.refresh_token;\n          delete userdata['access_token'];\n          delete userdata['refresh_token'];\n          _context.next = 11;\n          return put(signinSuccess(userdata));\n\n        case 11:\n          storeTokens(access_token, refresh_token);\n          _context.next = 18;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 18;\n          return put(signinError(response.status));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 14]]);\n}\n\nexport function signinSaga() {\n  return _regeneratorRuntime.wrap(function signinSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(REQUEST_SIGNIN, requestSigninSaga);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nvar initialState = {\n  signinType: null,\n  isSignin: false,\n  user: null,\n  error: null\n};\nexport default function signin() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_SIGNIN_TYPE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        signinType: action.payload\n      });\n\n    case SIGNIN_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isSignin: true,\n        user: action.payload\n      });\n\n    case SIGNIN_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isSignin: false,\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n}\n'';","map":{"version":3,"sources":["/home/limwondong/codestates/nyamnyam/nyamnyam-client/src/modules/signin.ts"],"names":["requestSigninSaga","signinSaga","call","put","takeLatest","authAPI","storeTokens","SET_SIGNIN_TYPE","SIGNIN_SUCCESS","SIGNIN_ERROR","REQUEST_SIGNIN","setSigninType","signinType","type","payload","signinSuccess","userData","signinError","msg","requestSignin","signinInfo","action","signin","response","userdata","access_token","refresh_token","status","initialState","isSignin","user","error","state"],"mappings":"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","sourcesContent":["import { State } from 'react-native-gesture-handler';\nimport { action, ActionType } from 'typesafe-actions';\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport * as authAPI from '@base/api/auth';\nimport { signinInfo, SigninState, SigninType, User } from '@base/types/auth';\nimport { storeTokens } from '@base/lib/auth';\n\n//액션 타입\nconst SET_SIGNIN_TYPE = 'signin/SIGNIN_TYPE' as const;\n\nconst SIGNIN_SUCCESS = 'signin/SIGNIN_SUCCESS' as const;\n\nconst SIGNIN_ERROR = 'signin/SIGNIN_ERROR' as const;\n\nconst REQUEST_SIGNIN = 'signin/REQUEST_SIGNIN' as const;\n\n\n//액션 생성자\nexport const setSigninType = (signinType: SigninType) => ({\n    type: SET_SIGNIN_TYPE,\n    payload: signinType\n});\n\nexport const signinSuccess = (userData: User) => ({\n    type: SIGNIN_SUCCESS,\n    payload: userData\n});\n\nexport const signinError = (msg: string) => ({\n    type: SIGNIN_ERROR,\n    payload: msg\n});\n\nexport const requestSignin = (signinInfo: signinInfo) => ({\n    type: REQUEST_SIGNIN,\n    payload: signinInfo\n});\n\ntype SigninAction =\n    | ReturnType<typeof setSigninType>\n    | ReturnType<typeof signinSuccess>\n    | ReturnType<typeof signinError>\n    | ReturnType<typeof requestSignin>;\n\n\n//리덕스 사가\nfunction* requestSigninSaga(action: any){\n    const signinInfo = action.payload;\n    let response;\n\n    try{\n        response = yield call(authAPI.signin, signinInfo)\n        const userdata = response.userdata\n        const { access_token, refresh_token } = userdata;\n        \n        delete userdata['access_token'];\n        delete userdata['refresh_token'];\n\n        yield put(signinSuccess(userdata));\n\n        //access token, refresh token 저장\n        storeTokens(access_token, refresh_token);\n\n    } catch(e){\n        yield put(signinError(response.status))\n    }\n}\n\nexport function* signinSaga(){\n    yield takeLatest(REQUEST_SIGNIN, requestSigninSaga);\n}\n\nconst initialState: SigninState = {\n    signinType: null,\n    isSignin: false,\n    user: null,\n    error: null\n};\n\n\n//리듀서\nexport default function signin(\n    state: SigninState = initialState,\n    action: SigninAction\n): SigninState {\n    switch(action.type){\n        case SET_SIGNIN_TYPE:\n            return {\n                ...state,\n                signinType: action.payload\n            };\n        case SIGNIN_SUCCESS:\n            return {\n                ...state,\n                isSignin: true,\n                user: action.payload\n            };\n        case SIGNIN_ERROR:\n            return {\n                ...state,\n                isSignin: false,\n                error: action.payload\n            }\n        default:\n            return state;\n    }\n}''\n"]},"metadata":{},"sourceType":"module"}