{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar RNEncryptedStorage = react_native_1.NativeModules.RNEncryptedStorage;\n\nif (!RNEncryptedStorage) {\n  throw new Error(\"RNEncryptedStorage is undefined\");\n}\n\nvar EncryptedStorage = function () {\n  function EncryptedStorage() {\n    _classCallCheck(this, EncryptedStorage);\n  }\n\n  _createClass(EncryptedStorage, null, [{\n    key: \"setItem\",\n    value: function setItem(key, value, cb) {\n      if (cb) {\n        RNEncryptedStorage.setItem(key, value).then(cb).catch(cb);\n        return;\n      }\n\n      return RNEncryptedStorage.setItem(key, value);\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key, cb) {\n      if (cb) {\n        RNEncryptedStorage.getItem(key).then(cb).catch(cb);\n        return;\n      }\n\n      return RNEncryptedStorage.getItem(key);\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(key, cb) {\n      if (cb) {\n        RNEncryptedStorage.removeItem(key).then(cb).catch(cb);\n        return;\n      }\n\n      return RNEncryptedStorage.removeItem(key);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(cb) {\n      if (cb) {\n        RNEncryptedStorage.clear().then(cb).catch(cb);\n        return;\n      }\n\n      return RNEncryptedStorage.clear();\n    }\n  }]);\n\n  return EncryptedStorage;\n}();\n\nexports.default = EncryptedStorage;","map":{"version":3,"sources":["/home/limwondong/codestates/nyamnyam/nyamnyam-client/node_modules/react-native-encrypted-storage/dist/EncryptedStorage.js"],"names":["Object","defineProperty","exports","value","RNEncryptedStorage","react_native_1","NativeModules","Error","EncryptedStorage","key","cb","setItem","then","catch","getItem","removeItem","clear","default"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;;;IAEQC,kB,GAAuBC,cAAc,CAACC,a,CAAtCF,kB;;AACR,IAAI,CAACA,kBAAL,EAAyB;AACrB,QAAM,IAAIG,KAAJ,CAAU,iCAAV,CAAN;AACH;;IACKC,gB;;;;;;;4BACaC,G,EAAKN,K,EAAOO,E,EAAI;AAC3B,UAAIA,EAAJ,EAAQ;AACJN,QAAAA,kBAAkB,CAACO,OAAnB,CAA2BF,GAA3B,EAAgCN,KAAhC,EAAuCS,IAAvC,CAA4CF,EAA5C,EAAgDG,KAAhD,CAAsDH,EAAtD;AACA;AACH;;AACD,aAAON,kBAAkB,CAACO,OAAnB,CAA2BF,GAA3B,EAAgCN,KAAhC,CAAP;AACH;;;4BACcM,G,EAAKC,E,EAAI;AACpB,UAAIA,EAAJ,EAAQ;AACJN,QAAAA,kBAAkB,CAACU,OAAnB,CAA2BL,GAA3B,EAAgCG,IAAhC,CAAqCF,EAArC,EAAyCG,KAAzC,CAA+CH,EAA/C;AACA;AACH;;AACD,aAAON,kBAAkB,CAACU,OAAnB,CAA2BL,GAA3B,CAAP;AACH;;;+BACiBA,G,EAAKC,E,EAAI;AACvB,UAAIA,EAAJ,EAAQ;AACJN,QAAAA,kBAAkB,CAACW,UAAnB,CAA8BN,GAA9B,EAAmCG,IAAnC,CAAwCF,EAAxC,EAA4CG,KAA5C,CAAkDH,EAAlD;AACA;AACH;;AACD,aAAON,kBAAkB,CAACW,UAAnB,CAA8BN,GAA9B,CAAP;AACH;;;0BACYC,E,EAAI;AACb,UAAIA,EAAJ,EAAQ;AACJN,QAAAA,kBAAkB,CAACY,KAAnB,GAA2BJ,IAA3B,CAAgCF,EAAhC,EAAoCG,KAApC,CAA0CH,EAA1C;AACA;AACH;;AACD,aAAON,kBAAkB,CAACY,KAAnB,EAAP;AACH;;;;;;AAELd,OAAO,CAACe,OAAR,GAAkBT,gBAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_native_1 = require(\"react-native\");\nconst { RNEncryptedStorage } = react_native_1.NativeModules;\nif (!RNEncryptedStorage) {\n    throw new Error(\"RNEncryptedStorage is undefined\");\n}\nclass EncryptedStorage {\n    static setItem(key, value, cb) {\n        if (cb) {\n            RNEncryptedStorage.setItem(key, value).then(cb).catch(cb);\n            return;\n        }\n        return RNEncryptedStorage.setItem(key, value);\n    }\n    static getItem(key, cb) {\n        if (cb) {\n            RNEncryptedStorage.getItem(key).then(cb).catch(cb);\n            return;\n        }\n        return RNEncryptedStorage.getItem(key);\n    }\n    static removeItem(key, cb) {\n        if (cb) {\n            RNEncryptedStorage.removeItem(key).then(cb).catch(cb);\n            return;\n        }\n        return RNEncryptedStorage.removeItem(key);\n    }\n    static clear(cb) {\n        if (cb) {\n            RNEncryptedStorage.clear().then(cb).catch(cb);\n            return;\n        }\n        return RNEncryptedStorage.clear();\n    }\n}\nexports.default = EncryptedStorage;\n"]},"metadata":{},"sourceType":"script"}